app  =>  user  =>  identity + access (who the user + what permissions has) (authentication + authorization)

Authentication in Next.js:
Client-Side         Server-Side         API Routes

persist data  =>  database

Static Site Generation (SSG):>
    getStaticProps() => runs at build time, sirf pages ky folder ky andar use karain,
    sab sy pehly props run karvata hai async await sy promise jab tak resolve na ho,
    na client aur na he server py code execute hota just build time py hota
    Data cached and Reused it is better for auth.
getServerSideProps() => runs for every incoming request and we can take information about that incoming request
                        credentials wagera is mein run karvaty hain takeh expose na hoon users ko, never run
                        code on client-side.

-----------
https://youtu.be/MFuwkrseXVE

React.js => Library (Client-Side JavaScript):
    needs different Libraries for different purposes like routing, auth, etc...

Next.js => Framework (Full-Stack):
    Framework is bigger than library and has more features, focusing on more things instead of a single one.
    Framework built on a library enhances library core features out of the box like Routing and doesn't need
    to reinvent the wheel and third-party libraries. You still write React Code, components, state, etc
    next.js just enhance the previous features and adds more


NEXT.js KEY FEATURES and BENEFITS:>
    Server-Side (Pre-) Rendering:   Preparing page content on the server instead client, React mein Data
                                    Rendering client-side py hoti hai to jab server sy browser (client) mein
                                    data aata to initially loading state mein rehta hai jab tak load na ho
                                    proper (a flickering page for a fraction of a second), yani bhot he thora
                                    sa intazar karna parta, UX nahi acha, bad SEO. Admin Panel jo login hony
                                    ky baad chalta hai wahan SEO matter nai karti kiyon keh search engine nahi
                                    dekhta is dashboard ko (user-specific), public-facing pages with a lot of
                                    content should be SEOed. Jab Request hit ki jati hai to Data fetching server
                                    py he ho jati aur hamein as a result, client-side py finished page milta hai
                                    (user aur crawler ko). Page Flickering is eliminated and search engines can
                                    see Page Contents. Allow Re-Rendering of react pages and components on a
                                    server. React ky pas bhi built-in features hain yeh lekin unhain handle
                                    karna mushkil aur extra setup chahye.

    File-Based Routing:         Illusion to have multiple pages. jaisy HTML mein files ka naam he route hota tha.

    Full-Stack Capabilities:    Client-Side Code with Server-Side Pre-Rendering, Standalone Backend Code
                                We stay in one project and don't have to build a standalone rest api project but
                                instead, we work on one project.


npm (node.js) De-Facto Standard Tool for installing and managing JavaScript Libraries.

page load hoga to state lost ho jaye gi react, redux state... aur single page application ka mqsd he khatam
Link request send karna aur new HTML page ko get karna is pory process ko prevent karta hai aur apny tareeqy
sy handle karta hai, loaded components ko re-render ya load kar ky aur URL change kar ky, lagta aisy keh new
page visit kiya lekin haqeeqat mein aap single page application ky environment mein he hain.
Website ky internal links ky Link ka tag use karna...

pages ky folder mein..:>
folder/index.js => folder-name (route)             folder/name.js => folder-name/name (route)


PRE-RENDERING PROBLEM:>
    useEffect() mein data fetching jab hoti to pehli bar null ya empty render hota because of the initial state
    of a component aur 2sri bar proper data render ho ky fetch hota hai lekin html page ky source mein woh
    data pehli dafa he jata hai yani search engine mein seo problem paida hoti is tarah iska solution next.js
    mein hai getStaticProps()
isi liye jab server sy data na aana ho tab useEffect() use na karain yani jab data static ya dummy ho khud
sy diya hova...

useRouter Hook sirf React Components mein use kar skty hain getStaticProps() ya getServerSideProps() jo keh
(next.js ky hain) mein nahi

getStaticPaths() => which dynamic values this page should be pre-generated, getStaticProps() har page request
                    py chaly gi aur getStaticPaths() data fetch kary ga har meetupId ka aur props return hoon
                    gi getStaticProps() ki taraf sy...
                    Which Instance of Dynamic Page


API Routes =>   Don't return html page but which are instead about accepting incoming http request (all types)
                with json data attached to it. Store data in db and then retrieve or return (api endpoints).
                Folder name api, Receive js Return js. File name act as path segments in url. Only runs on the
                server, so instead of writing react code write server-side code. Code never runs nor exposed
                on the client-side, so we can use credentials without compromising them. Whenever request send
                functions triggered.
